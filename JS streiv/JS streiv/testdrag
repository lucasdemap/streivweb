<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Page</title>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        @font-face {
            font-family: 'Aviano';
            src: url('assets/aviano.ttf') format('truetype'); /* Adjust the path and format as necessary */
        }

        body {
            margin: 0; /* Remove default margin */
            padding: 0; /* Remove default padding */
            background-image: url('assets/background.jpg');
            background-size: cover; /* Cover the entire viewport */
            background-position: center; /* Center the background image */
            background-repeat: no-repeat; /* Do not repeat the background image */
            font-family: 'Aviano', sans-serif; /* Set font family */
            color: #ffffff; /* Set text color */
            display: flex;
            flex-direction: column; /* Adjusted to column layout */
            align-items: center;
            min-height: 100vh;
            position: relative; /* Set body to relative position */
        }

        /* Positioning for STREIV */
        #streiv {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1; /* Ensure STREIV and buttons are above other elements */
        }

        #videoContainer {
            width: 100%;
            max-width: 800px; /* Adjusted to fit within the container */
            margin-top: 50px;
            position: relative;
            overflow: hidden; /* Ensure metrics stay within video container */
        }

        #videoPlayer {
            width: 100%;
            height: auto; /* Ensures video maintains aspect ratio */
        }

        

        /* Metrics Overlay */
        .metric {
            background-color: rgba(255, 0, 0, 0.5); /* Red color with 50% opacity */
            color: #ffffff;
            font-family: 'Aviano', sans-serif; /* Apply Aviano font */
            position: absolute;
            cursor: pointer; /* Set cursor to pointer for draggable metrics */
            user-select: none; /* Prevent text selection while dragging */
            transition: none; /* Remove transition for smoother dragging */
            display: flex; /* Enable flexbox for centering text */
            justify-content: center; /* Center horizontally */
            align-items: center; /* Center vertically */
            z-index: 2; /* Ensure metrics are above video */
        }

        /* Arrow for resizing */
        .resize-arrow {
            width: 20px;
            height: 20px;
            background-color: #ffffff;
            position: absolute;
            bottom: 1%;
            right: 1%;
            cursor: nwse-resize;
            z-index: 3; /* Ensure arrow is above metrics */
        }
    </style>
</head>
<body>

<h1 id="streiv">STREIV</h1>

<div id="videoContainer">
    <video id="videoPlayer" controls autoplay>
        <source src="" type="video/mp4">
        Your browser does not support the video tag.
    </video>

    <!-- Metrics will be dynamically inserted here -->
</div>

<div id="buttons">
    <!-- Metric buttons -->
    <button onclick="showMetric('78 km/h', this)">Speed</button>
    <button onclick="showMetric('689 watts', this)">Watts</button>
    <button onclick="showMetric('120 HR', this)">Heartrate</button>
    <button onclick="showMetric('10 km', this)">Distance</button>
    <button onclick="showMetric('5 %', this)">Slope</button>
    <button onclick="showMetric('25 Â°C', this)">Temperature</button>
    <button onclick="showMetric('85 rpm', this)">Cadence</button>
    <button onclick="showMetric('500 m', this)">Altitude</button>
</div>

<script src="ffmpeg-core.js"></script>

<script>
    var addedMetrics = []; // Array to store added metrics

    // Function to get video URL from query parameter
    function getVideoURL() {
        var queryString = window.location.search;
        var urlParams = new URLSearchParams(queryString);
        return urlParams.get('videoURL');
    }

    // Set video source
    var videoURL = getVideoURL();
    var videoPlayer = document.getElementById('videoPlayer');
    videoPlayer.src = videoURL;

    // Function to show metric in the video
    function showMetric(value, button) {
        if (!addedMetrics.includes(value)) { // Check if metric already added
            var videoContainer = document.getElementById('videoContainer');
            var metricElement = document.createElement('div');
            metricElement.classList.add('metric');
            metricElement.textContent = value;

            // Add event listeners for dragging
            metricElement.addEventListener('mousedown', startDragging);

            // Create resize arrow
            var resizeArrow = document.createElement('div');
            resizeArrow.classList.add('resize-arrow');
            resizeArrow.addEventListener('mousedown', startResizing);
            metricElement.appendChild(resizeArrow);

            videoContainer.appendChild(metricElement);

            // Ensure metric stays within video container
            metricElement.style.left = (videoContainer.offsetWidth / 2 - metricElement.offsetWidth / 2) + 'px';
            metricElement.style.top = (videoContainer.offsetHeight / 2 - metricElement.offsetHeight / 2) + 'px';

            addedMetrics.push(value); // Add metric to the array
        }
    }

    // Global variables to store resizing state and initial dimensions
    var isResizing = false;
    var currentMetric = null;
    var startX, startY, startWidth, startHeight, startLeft, startTop;

    // Function to handle start of resizing
    function startResizing(event) {
        isResizing = true;
        currentMetric = event.target.parentNode;
        startX = event.clientX;
        startY = event.clientY;
        startWidth = parseFloat(window.getComputedStyle(currentMetric).width);
        startHeight = parseFloat(window.getComputedStyle(currentMetric).height);
        startLeft = parseFloat(window.getComputedStyle(currentMetric).left);
        startTop = parseFloat(window.getComputedStyle(currentMetric).top);

        document.addEventListener('mousemove', resizeMetric);
        document.addEventListener('mouseup', stopResizing);
    }

    // Function to handle end of resizing
    function stopResizing(event) {
        isResizing = false;
        document.removeEventListener('mousemove', resizeMetric);
        document.removeEventListener('mouseup', stopResizing);
    }

    // Function to handle resizing
    function resizeMetric(event) {
        if (isResizing) {
            var deltaX = event.clientX - startX;
            var deltaY = event.clientY - startY;

            var newWidth = startWidth + deltaX;
            var newHeight = startHeight + deltaY;

            // Maintain aspect ratio
            var aspectRatio = startWidth / startHeight;
            if (deltaX !== 0) {
                newHeight = newWidth / aspectRatio;
            } else if (deltaY !== 0) {
                newWidth = newHeight * aspectRatio;
            }

            // Ensure minimum size
            newWidth = Math.max(newWidth, 50);
            newHeight = Math.max(newHeight, 20);

            // Calculate new position to keep the metric centered
            var newLeft = startLeft - (newWidth - startWidth) / 2;
            var newTop = startTop - (newHeight - startHeight) / 2;

            // Update metric dimensions and position
            currentMetric.style.width = newWidth + 'px';
            currentMetric.style.height = newHeight + 'px';
            currentMetric.style.left = newLeft + 'px';
            currentMetric.style.top = newTop + 'px';



           

        }
    }








    var isDragging = false;
    var currentMetricForDragging = null;
    var offsetX = 0;
    var offsetY = 0;

    // Function to handle start of dragging
    function startDragging(event) {
        isDragging = true;
        currentMetricForDragging = event.target;
        currentMetricForDragging.style.cursor = 'grabbing';
        currentMetricForDragging.style.transition = 'none'; // Remove transition for smoother dragging

        // Calculate the offset from the click point to the top-left corner of the metric element
        var metricRect = currentMetricForDragging.getBoundingClientRect();
        offsetX = event.clientX - metricRect.left;
        offsetY = event.clientY - metricRect.top;

        document.addEventListener('mousemove', dragMetric);
        document.addEventListener('mouseup', stopDragging);
    }

    // Function to handle end of dragging
    function stopDragging(event) {
        isDragging = false;
        currentMetricForDragging.style.cursor = 'pointer';
        currentMetricForDragging.style.transition = ''; // Restore default transition
        document.removeEventListener('mousemove', dragMetric);
        document.removeEventListener('mouseup', stopDragging);
    }

    // Function to handle dragging
    function dragMetric(event) {
        if (isDragging) {
            var x = event.clientX;
            var y = event.clientY;

            console.log('Selected file is not a video.');


            var videoContainer = document.getElementById('videoContainer');

            // Calculate the new position based on the mouse position relative to the video container
            var newX = x - offsetX - videoContainer.getBoundingClientRect().left;
            var newY = y - offsetY - videoContainer.getBoundingClientRect().top;

            // Ensure metric stays within video container
            var minX = 0;
            var minY = 0;
            var maxX = videoContainer.offsetWidth - currentMetricForDragging.offsetWidth;
            var maxY = videoContainer.offsetHeight - currentMetricForDragging.offsetHeight;

            // Clamp the new position within the container bounds
            newX = Math.max(minX, Math.min(newX, maxX));
            newY = Math.max(minY, Math.min(newY, maxY));

            currentMetricForDragging.style.left = newX + 'px';
            currentMetricForDragging.style.top = newY + 'px';
        }
    }
</script>
</body>
</html>
