<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Page</title>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        @font-face {
            font-family: 'Aviano';
            src: url('assets/aviano.ttf') format('truetype'); /* Adjust the path and format as necessary */
        }

        body {
            margin: 0; /* Remove default margin */
            padding: 0; /* Remove default padding */
            background-image: url('assets/background.jpg');
            background-size: cover; /* Cover the entire viewport */
            background-position: center; /* Center the background image */
            background-repeat: no-repeat; /* Do not repeat the background image */
            font-family: 'Aviano', sans-serif; /* Set font family */
            color: #ffffff; /* Set text color */
            display: flex;
            flex-direction: column; /* Adjusted to column layout */
            align-items: center;
            min-height: 100vh;
            position: relative; /* Set body to relative position */
        }

        /* Positioning for STREIV */
        #streiv {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1; /* Ensure STREIV and buttons are above other elements */
        }

        #videoContainer {
            width: 100%;
            max-width: 800px; /* Adjusted to fit within the container */
            margin-top: 50px;
            position: relative;
            overflow: hidden; /* Ensure metrics stay within video container */
        }

        #videoPlayer {
            width: 100%;
            height: auto; /* Ensures video maintains aspect ratio */
        }

        /* Metrics Overlay */
        .metric {
            background-color: rgba(255, 0, 0, 0.5); /* Red color with 50% opacity */
            color: #ffffff;
            font-family: 'Aviano', sans-serif; /* Apply Aviano font */
            position: absolute;
            cursor: pointer; /* Set cursor to pointer for draggable metrics */
            user-select: none; /* Prevent text selection while dragging */
            transition: none; /* Remove transition for smoother dragging */
        }
    </style>
</head>
<body>

    <h1 id="streiv">STREIV</h1>

    <div id="videoContainer">
        <video id="videoPlayer" controls autoplay>
            <source src="" type="video/mp4">
            Your browser does not support the video tag.
        </video>

        <!-- Metrics will be dynamically inserted here -->
    </div>

    <div id="buttons">
        <!-- Metric buttons -->
        <button onclick="showMetric('78 km/h', this)">Speed</button>
        <button onclick="showMetric('689 watts', this)">Watts</button>
        <button onclick="showMetric('120 HR', this)">Heartrate</button>
        <button onclick="showMetric('10 km', this)">Distance</button>
        <button onclick="showMetric('5 %', this)">Slope</button>
        <button onclick="showMetric('25 Â°C', this)">Temperature</button>
        <button onclick="showMetric('85 rpm', this)">Cadence</button>
        <button onclick="showMetric('500 m', this)">Altitude</button>
    </div>

    <script src="ffmpeg-core.js"></script>

    <script>
        var addedMetrics = []; // Array to store added metrics

        // Function to get video URL from query parameter
        function getVideoURL() {
            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            return urlParams.get('videoURL');
        }

        // Set video source
        var videoURL = getVideoURL();
        var videoPlayer = document.getElementById('videoPlayer');
        videoPlayer.src = videoURL;

        // Function to show metric in the video
        function showMetric(value, button) {
            if (!addedMetrics.includes(value)) { // Check if metric already added
                var videoContainer = document.getElementById('videoContainer');
                var metricElement = document.createElement('div');
                metricElement.classList.add('metric');
                metricElement.textContent = value;
                videoContainer.appendChild(metricElement);

                // Add event listeners for dragging
                metricElement.addEventListener('mousedown', startDragging);

                // Ensure metric stays within video container
                metricElement.style.left = (videoContainer.offsetWidth / 2 - metricElement.offsetWidth / 2) + 'px';
                metricElement.style.top = (videoContainer.offsetHeight / 2 - metricElement.offsetHeight / 2) + 'px';

                addedMetrics.push(value); // Add metric to the array

                
            }
        }

                        var isDragging = false;
                        var currentMetric = null;
            // Global variables to store dragging state and current metric
        var isDragging = false;
        var currentMetric = null;
        var offsetX = 0;
        var offsetY = 0;

        // Function to handle start of dragging
        function startDragging(event) {
            isDragging = true;
            currentMetric = event.target;
            currentMetric.style.cursor = 'grabbing';
            currentMetric.style.transition = 'none'; // Remove transition for smoother dragging

            // Calculate the offset from the click point to the top-left corner of the metric element
            var metricRect = currentMetric.getBoundingClientRect();
            offsetX = event.clientX - metricRect.left;
            offsetY = event.clientY - metricRect.top;

            document.addEventListener('mousemove', dragMetric);
            document.addEventListener('mouseup', stopDragging);
        }

        // Function to handle end of dragging
        function stopDragging(event) {
            isDragging = false;
            currentMetric.style.cursor = 'pointer';
            currentMetric.style.transition = ''; // Restore default transition
            document.removeEventListener('mousemove', dragMetric);
            document.removeEventListener('mouseup', stopDragging);
        }

        // Function to handle dragging
        function dragMetric(event) {
            if (isDragging) {
                var x = event.clientX;
                var y = event.clientY;

                var videoContainer = document.getElementById('videoContainer');

                // Calculate the new position based on the mouse position relative to the video container
                var newX = x - offsetX - videoContainer.getBoundingClientRect().left;
                var newY = y - offsetY - videoContainer.getBoundingClientRect().top;

                // Ensure metric stays within video container
                var minX = 0;
                var minY = 0;
                var maxX = videoContainer.offsetWidth - currentMetric.offsetWidth;
                var maxY = videoContainer.offsetHeight - currentMetric.offsetHeight;

                // Clamp the new position within the container bounds
                newX = Math.max(minX, Math.min(newX, maxX));
                newY = Math.max(minY, Math.min(newY, maxY));

                currentMetric.style.left = newX + 'px';
                currentMetric.style.top = newY + 'px';
            }
        }


    </script>
</body>
</html>